local status_ok, which_key = pcall(require, "which-key")
if not status_ok then
  return
end

local opts = {
  mode = "n",     -- NORMAL mode
  prefix = "<leader>",
  buffer = nil,   -- Global mappings. Specify a buffer number for buffer local mappings
  silent = true,  -- use `silent` when creating keymaps
  noremap = true, -- use `noremap` when creating keymaps
  nowait = true,  -- use `nowait` when creating keymaps
}

local mappings = {
  {
    { "<leader>F",  "<cmd>Telescope live_grep theme=ivy<cr>",                                                                            desc = "Find Text",              nowait = true, remap = false },
    { "<leader>P",  "<cmd>lua require('telescope').extensions.projects.projects()<cr>",                                                  desc = "Projects",               nowait = true, remap = false },
    { "<leader>a",  "<cmd>Alpha<cr>",                                                                                                    desc = "Alpha",                  nowait = true, remap = false },
    { "<leader>b",  "<cmd>lua require('telescope.builtin').buffers(require('telescope.themes').get_dropdown{previewer = false})<cr>",    desc = "Buffers",                nowait = true, remap = false },
    { "<leader>c",  "<cmd>BufDel!<CR>",                                                                                                  desc = "Close Buffer",           nowait = true, remap = false },
    { "<leader>d",  group = "Debug",                                                                                                     nowait = true,                   remap = false },
    { "<leader>dB", "<cmd>lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>",                                  desc = "Conditional Breakpoint", nowait = true, remap = false },
    { "<leader>db", "<cmd>lua require'dap'.toggle_breakpoint()<CR>",                                                                     desc = "Breakpoint",             nowait = true, remap = false },
    { "<leader>dc", "<cmd>lua require'dap'.continue()<CR>",                                                                              desc = "Continue",               nowait = true, remap = false },
    { "<leader>dd", "<cmd>lua require'dap'.down()<CR>",                                                                                  desc = "Down",                   nowait = true, remap = false },
    { "<leader>dg", "<cmd>lua require'dapui'.toggle()<CR>",                                                                              desc = "Gui",                    nowait = true, remap = false },
    { "<leader>dh", "<cmd>lua require'dap'.step_over()<CR>",                                                                             desc = "Step Over",              nowait = true, remap = false },
    { "<leader>dj", "<cmd>lua require'dap'.step_into()<CR>",                                                                             desc = "Step Into",              nowait = true, remap = false },
    { "<leader>dk", "<cmd>lua require'dap'.step_out()<CR>",                                                                              desc = "Step Out",               nowait = true, remap = false },
    { "<leader>dn", "<cmd>lua local widgets=require'dap.ui.widgets';widgets.centered_float(widgets.scopes)<CR>",                         desc = "Info",                   nowait = true, remap = false },
    { "<leader>dr", "<cmd>lua require'dap'.repl.open()<CR>",                                                                             desc = "REPL",                   nowait = true, remap = false },
    { "<leader>du", "<cmd>lua require'dap'.up()<CR>",                                                                                    desc = "Up",                     nowait = true, remap = false },
    { "<leader>dw", "<cmd>lua require'dap.ui.widgets'.hover()<CR>",                                                                      desc = "Widgets",                nowait = true, remap = false },
    { "<leader>dz", "<cmd>lua require'dap'.run_last()<CR>",                                                                              desc = "Run Last",               nowait = true, remap = false },
    { "<leader>e",  "<cmd>NvimTreeToggle<cr>",                                                                                           desc = "Explorer",               nowait = true, remap = false },
    { "<leader>f",  "<cmd>lua require('telescope.builtin').find_files(require('telescope.themes').get_dropdown{previewer = false})<cr>", desc = "Find files",             nowait = true, remap = false },
    { "<leader>g",  group = "Git",                                                                                                       nowait = true,                   remap = false },
    { "<leader>gR", "<cmd>lua require 'gitsigns'.reset_buffer()<cr>",                                                                    desc = "Reset Buffer",           nowait = true, remap = false },
    { "<leader>gb", "<cmd>Telescope git_branches<cr>",                                                                                   desc = "Checkout branch",        nowait = true, remap = false },
    { "<leader>gc", "<cmd>Telescope git_commits<cr>",                                                                                    desc = "Checkout commit",        nowait = true, remap = false },
    { "<leader>gd", "<cmd>Gitsigns diffthis HEAD<cr>",                                                                                   desc = "Diff",                   nowait = true, remap = false },
    { "<leader>gg", "<cmd>lua _LAZYGIT_TOGGLE()<CR>",                                                                                    desc = "Lazygit",                nowait = true, remap = false },
    { "<leader>gj", "<cmd>lua require 'gitsigns'.next_hunk()<cr>",                                                                       desc = "Next Hunk",              nowait = true, remap = false },
    { "<leader>gk", "<cmd>lua require 'gitsigns'.prev_hunk()<cr>",                                                                       desc = "Prev Hunk",              nowait = true, remap = false },
    { "<leader>gl", "<cmd>lua require 'gitsigns'.blame_line()<cr>",                                                                      desc = "Blame",                  nowait = true, remap = false },
    { "<leader>go", "<cmd>Telescope git_status<cr>",                                                                                     desc = "Open changed file",      nowait = true, remap = false },
    { "<leader>gp", "<cmd>lua require 'gitsigns'.preview_hunk()<cr>",                                                                    desc = "Preview Hunk",           nowait = true, remap = false },
    { "<leader>gr", "<cmd>lua require 'gitsigns'.reset_hunk()<cr>",                                                                      desc = "Reset Hunk",             nowait = true, remap = false },
    { "<leader>gs", "<cmd>lua require 'gitsigns'.stage_hunk()<cr>",                                                                      desc = "Stage Hunk",             nowait = true, remap = false },
    { "<leader>gu", "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>",                                                                 desc = "Undo Stage Hunk",        nowait = true, remap = false },
    { "<leader>h",  group = "Harpoon",                                                                                                   nowait = true,                   remap = false },
    { "<leader>ha", "<cmd>lua require('harpoon.mark').add_file()<cr>",                                                                   desc = "add file",               nowait = true, remap = false },
    { "<leader>hf", "<cmd>lua require('harpoon.ui').toggle_quick_menu()<cr>",                                                            desc = "menu",                   nowait = true, remap = false },
    { "<leader>hn", "<cmd>lua require('harpoon.ui').nav_next()<cr>",                                                                     desc = "goto next",              nowait = true, remap = false },
    { "<leader>hp", "<cmd>lua require('harpoon.ui').nav_prev()<cr>",                                                                     desc = "goto prev",              nowait = true, remap = false },
    { "<leader>l",  group = "LSP",                                                                                                       nowait = true,                   remap = false },
    { "<leader>lI", "<cmd>Mason<cr>",                                                                                                    desc = "Installer Info",         nowait = true, remap = false },
    { "<leader>lS", "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>",                                                                  desc = "Workspace Symbols",      nowait = true, remap = false },
    { "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<cr>",                                                                            desc = "Code Action",            nowait = true, remap = false },
    { "<leader>ld", "<cmd>Telescope diagnostics bufnr=0<cr>",                                                                            desc = "Document Diagnostics",   nowait = true, remap = false },
    { "<leader>lf", "<cmd>lua vim.lsp.buf.format({async = false})<cr>",                                                                  desc = "Format",                 nowait = true, remap = false },
    { "<leader>li", "<cmd>LspInfo<cr>",                                                                                                  desc = "Info",                   nowait = true, remap = false },
    { "<leader>lj", "<cmd>lua vim.diagnostic.goto_next()<CR>",                                                                           desc = "Next Diagnostic",        nowait = true, remap = false },
    { "<leader>lk", "<cmd>lua vim.diagnostic.goto_prev()<cr>",                                                                           desc = "Prev Diagnostic",        nowait = true, remap = false },
    { "<leader>ll", "<cmd>lua vim.lsp.codelens.run()<cr>",                                                                               desc = "CodeLens Action",        nowait = true, remap = false },
    { "<leader>lq", "<cmd>lua vim.diagnostic.set_loclist()<cr>",                                                                         desc = "Quickfix",               nowait = true, remap = false },
    { "<leader>lr", "<cmd>lua vim.buf.rename()<cr>",                                                                                     desc = "Rename",                 nowait = true, remap = false },
    { "<leader>ls", "<cmd>Telescope lsp_document_symbols<cr>",                                                                           desc = "Document Symbols",       nowait = true, remap = false },
    { "<leader>lw", "<cmd>Telescope diagnostics<cr>",                                                                                    desc = "Workspace Diagnostics",  nowait = true, remap = false },
    { "<leader>p",  group = "Plugins",                                                                                                   nowait = true,                   remap = false },
    { "<leader>pc", "<cmd>Lazy clean<cr>",                                                                                               desc = "Clean",                  nowait = true, remap = false },
    { "<leader>pi", "<cmd>Lazy install<cr>",                                                                                             desc = "Install",                nowait = true, remap = false },
    { "<leader>pm", "<cmd>Lazy <cr>",                                                                                                    desc = "Menu",                   nowait = true, remap = false },
    { "<leader>ps", "<cmd>Lazy sync<cr>",                                                                                                desc = "Sync",                   nowait = true, remap = false },
    { "<leader>pu", "<cmd>Lazy update<cr>",                                                                                              desc = "Update",                 nowait = true, remap = false },
    { "<leader>q",  "<cmd>q!<CR>",                                                                                                       desc = "Quit",                   nowait = true, remap = false },
    { "<leader>r",  group = "Replace",                                                                                                   nowait = true,                   remap = false },
    { "<leader>rf", "<cmd>lua require('spectre').open_file_search()<cr>",                                                                desc = "Replace Buffer",         nowait = true, remap = false },
    { "<leader>rn", "<cmd>lua require('renamer').rename({empty = true})<cr>",                                                            desc = "Rename",                 nowait = true, remap = false },
    { "<leader>rr", "<cmd>lua require('spectre').open()<cr>",                                                                            desc = "Replace",                nowait = true, remap = false },
    { "<leader>rw", "<cmd>lua require('spectre').open_visual({select_word=true})<cr>",                                                   desc = "Replace Word",           nowait = true, remap = false },
    { "<leader>s",  group = "Search",                                                                                                    nowait = true,                   remap = false },
    { "<leader>sC", "<cmd>Telescope commands<cr>",                                                                                       desc = "Commands",               nowait = true, remap = false },
    { "<leader>sM", "<cmd>Telescope man_pages<cr>",                                                                                      desc = "Man Pages",              nowait = true, remap = false },
    { "<leader>sR", "<cmd>Telescope registers<cr>",                                                                                      desc = "Registers",              nowait = true, remap = false },
    { "<leader>sb", "<cmd>Telescope git_branches<cr>",                                                                                   desc = "Checkout branch",        nowait = true, remap = false },
    { "<leader>sc", "<cmd>Telescope colorscheme<cr>",                                                                                    desc = "Colorscheme",            nowait = true, remap = false },
    { "<leader>sh", "<cmd>Telescope help_tags<cr>",                                                                                      desc = "Find Help",              nowait = true, remap = false },
    { "<leader>sk", "<cmd>Telescope keymaps<cr>",                                                                                        desc = "Keymaps",                nowait = true, remap = false },
    { "<leader>sr", "<cmd>Telescope oldfiles<cr>",                                                                                       desc = "Open Recent File",       nowait = true, remap = false },
    { "<leader>t",  group = "Terminal",                                                                                                  nowait = true,                   remap = false },
    { "<leader>t1", "<cmd>1ToggleTerm size=10 direction=horizontal<cr>",                                                                 desc = "Horizontal",             nowait = true, remap = false },
    { "<leader>t2", "<cmd>2ToggleTerm size=10 direction=horizontal<cr>",                                                                 desc = "Horizontal",             nowait = true, remap = false },
    { "<leader>t3", "<cmd>3ToggleTerm size=10 direction=horizontal<cr>",                                                                 desc = "Horizontal",             nowait = true, remap = false },
    { "<leader>t4", "<cmd>4ToggleTerm size=10 direction=horizontal<cr>",                                                                 desc = "Horizontal",             nowait = true, remap = false },
    { "<leader>tf", "<cmd>5ToggleTerm direction=float<cr>",                                                                              desc = "Float",                  nowait = true, remap = false },
    { "<leader>tn", "<cmd>lua _NODE_TOGGLE()<cr>",                                                                                       desc = "Node",                   nowait = true, remap = false },
    { "<leader>tp", "<cmd>lua _PYTHON_TOGGLE()<cr>",                                                                                     desc = "Python",                 nowait = true, remap = false },
    { "<leader>tt", "<cmd>lua _HTOP_TOGGLE()<cr>",                                                                                       desc = "Htop",                   nowait = true, remap = false },
    { "<leader>tu", "<cmd>lua _NCDU_TOGGLE()<cr>",                                                                                       desc = "NCDU",                   nowait = true, remap = false },
    { "<leader>tv", "<cmd>6ToggleTerm size=80 direction=vertical<cr>",                                                                   desc = "Vertical",               nowait = true, remap = false },
    { "<leader>w",  "<cmd>w!<CR>",                                                                                                       desc = "Save",                   nowait = true, remap = false },
  }
}

which_key.register(mappings, opts)
